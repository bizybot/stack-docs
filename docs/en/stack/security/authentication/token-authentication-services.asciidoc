[role="xpack"]
[[token-authentication-services]]
=== Token based Authentication services

Authentication in {security} is handled by one or more token based authentication
services and _realms_ defined in _realm-chain_. The token based Authentication
services are used for authentication and management of tokens. These tokens can
be used as credentials attached to the request sent to {es}.
{security} provides the following built-in token based authentication
services listed by order in which they are consulted for authentication:

_token-service_::
The bearer tokens are generated based on the OAuth2 specification using
{ref}/security-api-get-token.html[get token API].
The access token is a short-lived token (defaults to 20 minutes and configurable
to maximum 1 hour) and can be refreshed using a refresh token.
The refresh token has a lifetime of 24 hours. The access token can be used by
sending a request with an `Authorization` header with a value having the prefix
`Bearer ` followed by the value of the access token.

_api-key-service_::
The API key service generates API keys using {ref}/security-api-create-api-key.html[create API key API].
By default, the API keys generated do not expire. The request to create API keys
can provide expiration to generate expiring API keys. The permissions for the
API key can be specified during the creation of the API key and are limited by the
authenticated user's permissions.
The API key can be used by sending a request with an `Authorization` header
with a value having the prefix `ApiKey ` followed by the _credentials_,
where _credentials_ is the base64 encoding of API key id and API key joined by a colon.

Depending on your use case you may want to decide on the lifetime of the tokens
generated by these services. This information can then be used to decide which
service you want to use to generate and manage the tokens. Non-expiring API keys
may seem easy option but care must be taken considering all the tradeoffs.
Both _token-service_ and _api-key-service_ allow invalidation of the tokens, see
{ref}/security-api-invalidate-token.html[invalidate token API] and
{ref}/security-api-invalidate-api-key.html[invalidate API key API].
